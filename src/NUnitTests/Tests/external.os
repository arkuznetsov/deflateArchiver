// ----------------------------------------------------------
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.
// ----------------------------------------------------------
// Codebase: https://github.com/ArKuznetsov/oscript-deflate/
// ----------------------------------------------------------

// #Использовать "build"

Перем юТест;

////////////////////////////////////////////////////////////////////
// Программный интерфейс

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт

	юТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;

	ВсеТесты.Добавить("ТестДолжен_СоздатьКомпоненту");
	ВсеТесты.Добавить("ТестДолжен_УпаковатьПоток");
	ВсеТесты.Добавить("ТестДолжен_РаспаковатьПоток");
	ВсеТесты.Добавить("ТестДолжен_УпаковатьФайл");
	ВсеТесты.Добавить("ТестДолжен_РаспаковатьФайл");

	ПередЗапускомТестов();

	Возврат ВсеТесты;

КонецФункции // ПолучитьСписокТестов()

Процедура ПередЗапускомТестов()

	ПутьККомпоненте = ОбъединитьПути(ТекущийСценарий().Каталог, "src", "oscript-component", "bin");
	ПутьККомпоненте = ОбъединитьПути(ПутьККомпоненте, "Debug", "net452", "oscript-component.dll");
	
	Попытка
		ПодключитьВнешнююКомпоненту(ПутьККомпоненте);
		Сообщить("Компонента подключена.");
	Исключение
		Сообщить("Компонента подключена ранее!");
	КонецПопытки;

КонецПроцедуры // ПередЗапускомТестов()

Процедура ТестДолжен_СоздатьКомпоненту() Экспорт

	Архиватор = Новый АрхиваторDeflate();
	юТест.ПроверитьРавенство(ТипЗнч(Архиватор), Тип("АрхиваторDeflate"), "Не удалось создать компоненту АрхиваторDeflate"); 

КонецПроцедуры // ТестДолжен_СоздатьКомпоненту()

Процедура ТестДолжен_УпаковатьПоток() Экспорт

	Архиватор = Новый АрхиваторDeflate();
	юТест.ПроверитьРавенство(ТипЗнч(Архиватор), Тип("АрхиваторDeflate"), "Не удалось создать компоненту АрхиваторDeflate"); 

	ВходящийПоток = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(ВходящийПоток, КодировкаТекста.UTF8);
	ЗаписьДанных.ЗаписатьСимволы("Это текст для тестирования сжатия потока!");
	ЗаписьДанных.Закрыть();
	ВходящийПоток.Перейти(0, ПозицияВПотоке.Начало);

	ИсходящийПоток = Новый ПотокВПамяти();

	Архиватор.УпаковатьПоток(ВходящийПоток, ИсходящийПоток, 2);

	Сообщить(СтрШаблон("Исходный размер: %1", ВходящийПоток.Размер()));
	Сообщить(СтрШаблон("Сжатый размер: %1", ИсходящийПоток.Размер()));

	ВходящийПоток.Закрыть();
	ДД = ИсходящийПоток.ЗакрытьИПолучитьДвоичныеДанные();
	Сообщить(СтрШаблон("Сжатые данные: %1", Base64Строка(ДД)));
	
	ТестоваяСтрока = "HYzRCYAwEENXOTe1XaCTCIeoSMVzhZeNvPYnJO9B2FQJyzjpKqrGwaM2ydjcWgl2nDd7isKFT9GMjxgHdHz5AQ==";

	юТест.ПроверитьРавенство(Base64Строка(ДД), ТестоваяСтрока, "Ошибка при упаковке потока"); 

КонецПроцедуры // ТестДолжен_УпаковатьПоток()

Процедура ТестДолжен_РаспаковатьПоток() Экспорт

	Архиватор = Новый АрхиваторDeflate();
	юТест.ПроверитьРавенство(ТипЗнч(Архиватор), Тип("АрхиваторDeflate"), "Не удалось создать компоненту АрхиваторDeflate"); 

	СжатыеДанные = "HYzRCYAwEENXqZu2XcBJhEMUyonnCi8bee1PyHuBcKgTJePG1dQLF4/2ZSYzVAlOjDd7DhVT40vha3BGSYx5lGDbDw==";
	ДД = Base64Значение(СжатыеДанные);

	ВходящийПоток = Новый ПотокВПамяти();
	ДД.ОткрытьПотокДляЧтения().КопироватьВ(ВходящийПоток);
	ВходящийПоток.Перейти(0, ПозицияВПотоке.Начало);

	ИсходящийПоток = Новый ПотокВПамяти();

	Архиватор.РаспаковатьПоток(ВходящийПоток, ИсходящийПоток);

	Сообщить(СтрШаблон("Исходный размер: %1", ВходящийПоток.Размер()));
	Сообщить(СтрШаблон("Распакованный размер: %1", ИсходящийПоток.Размер()));

	ЧтениеДанных = Новый ЧтениеДанных(ИсходящийПоток, КодировкаТекста.UTF8);
	ИсходящийПоток.Перейти(0, ПозицияВПотоке.Начало);
	РаспакованыйТекст = ЧтениеДанных.ПрочитатьСимволы();

	ВходящийПоток.Закрыть();
	ИсходящийПоток.Закрыть();

	ТестоваяСтрока = "Это текст для тестирования распаковки потока!";

	юТест.ПроверитьРавенство(РаспакованыйТекст, ТестоваяСтрока, "Ошибка при распаковке потока"); 

КонецПроцедуры // ТестДолжен_РаспаковатьПоток()

Процедура ТестДолжен_УпаковатьФайл() Экспорт

	Архиватор = Новый АрхиваторDeflate();
	юТест.ПроверитьРавенство(ТипЗнч(Архиватор), Тип("АрхиваторDeflate"), "Не удалось создать компоненту АрхиваторDeflate"); 

	ИмяТестовогоФайла = "testFile1.txt";
	ПутьКИсходномуФайлу = ОбъединитьПути(ТекущийСценарий().Каталог, "test", ИмяТестовогоФайла);
	ПутьКТестовомуФайлу = ПутьКИсходномуФайлу + ".out";

	Текст = Новый ТекстовыйДокумент();
	Текст.УстановитьТекст("Это тестовый файл для тестирования сжатия файла!");
	Текст.Записать(ПутьКИсходномуФайлу, КодировкаТекста.UTF8);

	Архиватор.УпаковатьФайл(ПутьКИсходномуФайлу, ПутьКТестовомуФайлу, 2);

	ДД = Новый ДвоичныеДанные(ПутьКТестовомуФайлу);

	Сообщить(СтрШаблон("Содержимое упакованного файла: %1", Base64Строка(ДД)));

	ТестоваСтрока = "e797/4W1F5su7FMAElsvNoKYFzZd7L6wU+Fiy4UNF3Ze2K1wYcuF3Rf7EQp2XGwAKQLK7gWygRKNF7Zd2ACW6IfrurBBkZcLAA==";

	юТест.ПроверитьРавенство(Base64Строка(ДД), ТестоваСтрока, "Ошибка при упаковке файла");

	УдалитьФайлы(ПутьКИсходномуФайлу);
	УдалитьФайлы(ПутьКТестовомуФайлу);

КонецПроцедуры // ТестДолжен_УпаковатьФайл()

Процедура ТестДолжен_РаспаковатьФайл() Экспорт

	Архиватор = Новый АрхиваторDeflate();
	юТест.ПроверитьРавенство(ТипЗнч(Архиватор), Тип("АрхиваторDeflate"), "Не удалось создать компоненту АрхиваторDeflate"); 

	ИмяТестовогоФайла = "testFile1.dfl";
	ПутьКИсходномуФайлу = ОбъединитьПути(ТекущийСценарий().Каталог, "test", ИмяТестовогоФайла);
	ПутьКТестовомуФайлу = ПутьКИсходномуФайлу + ".out";

	ДанныеФайла = "e797/4W1F5su7FMAElsvNoKYFzZd7L6wU+Fiy4UNF3Ze2K1wYcuF3Rf7EQp2XGwAKQLK7gWygRINFzZcbLywHyiwCyyx68IOuO4LGxR5uQA=";

	ДД = Base64Значение(ДанныеФайла);
	ДД.Записать(ПутьКИсходномуФайлу);

	Архиватор.РаспаковатьФайл(ПутьКИсходномуФайлу, ПутьКТестовомуФайлу);

	Текст = Новый ТекстовыйДокумент();
	Текст.Прочитать(ПутьКТестовомуФайлу, КодировкаТекста.UTF8);

	ТестоваяСтрока = "Это тестовый файл для тестирования распаковки файла!";

	юТест.ПроверитьРавенство(СокрЛП(Текст.ПолучитьТекст()), ТестоваяСтрока, "Ошибка при распаковке файла");

	УдалитьФайлы(ПутьКИсходномуФайлу);
	УдалитьФайлы(ПутьКТестовомуФайлу);

КонецПроцедуры // ТестДолжен_УпаковатьФайл()

Функция НовыйТекстовыйФайл(ИмяФайла, Знач Содержимое = "", Знач ПутьККаталогу = "")

	Текст = Новый ТекстовыйДокумент();
	Если ЗначениеЗаполнено(Содержимое) Тогда
		Текст.УстановитьТекст(Содержимое);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ПутьККаталогу) Тогда
		ПутьККаталогу = ПолучитьИмяВременногоФайла();
	КонецЕсли;

	ПутьКФайлу = ОбъединитьПути(ПутьККаталогу, ИмяФайла);

	Каталог = Новый Файл(ПутьККаталогу);
	Если НЕ (Каталог.Существует() И Каталог.ЭтоКаталог()) Тогда
		СоздатьКаталог(ПутьККаталогу);
	КонецЕсли;

	Текст.Записать(ПутьКФайлу);

	Возврат Новый Файл(ПутьКФайлу);

КонецФункции // НовыйТекстовыйФайл()